// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"

	"github.com/leaper-one/2SOMEone/2someone/user/rpc/user/internal/logic"
	"github.com/leaper-one/2SOMEone/2someone/user/rpc/user/internal/svc"
	"github.com/leaper-one/2SOMEone/2someone/user/rpc/user/types/user"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

//  通过手机号注册，需要验证码
func (s *UserServiceServer) SignUpByPhone(ctx context.Context, in *user.SignUpByPhoneRequest) (*user.SignUpByPhoneResponse, error) {
	l := logic.NewSignUpByPhoneLogic(ctx, s.svcCtx)
	return l.SignUpByPhone(in)
}

//  通过手机号登录
func (s *UserServiceServer) SignInByPhone(ctx context.Context, in *user.SignInByPhoneRequest) (*user.SignInByPhoneResponse, error) {
	l := logic.NewSignInByPhoneLogic(ctx, s.svcCtx)
	return l.SignInByPhone(in)
}

//  Get current user infomation by metadata with auth token
func (s *UserServiceServer) GetMe(ctx context.Context, in *user.GetMeRequest) (*user.GetMeResponse, error) {
	l := logic.NewGetMeLogic(ctx, s.svcCtx)
	return l.GetMe(in)
}

//  jwt needed in metadata
func (s *UserServiceServer) SetInfo(ctx context.Context, in *user.SetInfoRequest) (*user.SetInfoResponse, error) {
	l := logic.NewSetInfoLogic(ctx, s.svcCtx)
	return l.SetInfo(in)
}

//  根据 buid 获取 user_id
func (s *UserServiceServer) GetUserIDByBuid(ctx context.Context, in *user.GetUserIDByBuidRequest) (*user.GetUserIDByBuidResponse, error) {
	l := logic.NewGetUserIDByBuidLogic(ctx, s.svcCtx)
	return l.GetUserIDByBuid(in)
}
