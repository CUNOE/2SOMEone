// Code generated by goctl. DO NOT EDIT!

package bili_user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	biliUsersFieldNames          = builder.RawFieldNames(&BiliUsers{})
	biliUsersRows                = strings.Join(biliUsersFieldNames, ",")
	biliUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(biliUsersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	biliUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(biliUsersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	biliUsersModel interface {
		Insert(ctx context.Context, data *BiliUsers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BiliUsers, error)
		Update(ctx context.Context, data *BiliUsers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBiliUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BiliUsers struct {
		Id          int64          `db:"id"`
		CreatedAt   sql.NullTime   `db:"created_at"`
		UpdatedAt   sql.NullTime   `db:"updated_at"`
		DeletedAt   sql.NullTime   `db:"deleted_at"`
		UserId      sql.NullString `db:"user_id"`
		Buid        sql.NullInt64  `db:"buid"`
		LiveRoomId  sql.NullInt64  `db:"live_room_id"`
		LiveRoomUrl sql.NullString `db:"live_room_url"`
	}
)

func newBiliUsersModel(conn sqlx.SqlConn) *defaultBiliUsersModel {
	return &defaultBiliUsersModel{
		conn:  conn,
		table: "`bili_users`",
	}
}

func (m *defaultBiliUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBiliUsersModel) FindOne(ctx context.Context, id int64) (*BiliUsers, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", biliUsersRows, m.table)
	var resp BiliUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBiliUsersModel) Insert(ctx context.Context, data *BiliUsers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, biliUsersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.UserId, data.Buid, data.LiveRoomId, data.LiveRoomUrl)
	return ret, err
}

func (m *defaultBiliUsersModel) Update(ctx context.Context, data *BiliUsers) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, biliUsersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.UserId, data.Buid, data.LiveRoomId, data.LiveRoomUrl, data.Id)
	return err
}

func (m *defaultBiliUsersModel) tableName() string {
	return m.table
}
